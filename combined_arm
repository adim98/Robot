#include <Servo.h>
#include <NewPing.h>

 // create Servo object to control a servo
 //base servo 
Servo myservo; 
//arm servo 
Servo myservo2; 

//distance sensor
const int trigPin = 5;           //connects to the trigger pin on the distance sensor
const int echoPin = 4;           //connects to the echo pin on the distance sensor
#define MAX_DISTANCE 200
float distancecyl = 0;           //stores the distance measured by the distance sensor looking for cyliners
NewPing sonar(trigPin, echoPin, MAX_DISTANCE); // NewPing setup of pins and maximum distance.

void setup() 
{
  //attach the servos 
  //arm servo
  myservo.attach(10);  
  //base servo 
  myservo2.attach(9);
  

  //distance sensor
  pinMode(trigPin, OUTPUT);   //the trigger pin will output pulses of electricity
  pinMode(echoPin, INPUT);    //the echo pin will measure the duration of pulses coming back from the distance sensor

}

void loop() 
{
  arm_up(); 
  arm_open();
  get_distance(); 

}

void get_distance()
{
  float echoTime;                   //variable to store the time it takes for a ping to bounce off an object
  float calculatedDistance;         //variable to store the distance calculated from the echo time

  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(50);
  digitalWrite(trigPin, LOW);

  echoTime = pulseIn(echoPin, HIGH);      //use the pulsein command to see how long it takes for the pulse to bounce back to the sensor

  calculatedDistance = sonar.ping_cm();  //calculate the distance of the object that reflected the pulse 
  
  Serial.println(calculatedDistance);

  if (calculatedDistance < 8)
  {
  Serial.println("picking up cylinder");
  delay(500); 
  
  arm_open();
  Serial.println("op"); 
  delay (1500);

  arm_down(); 
  Serial.println("down");
  delay (1500);

  arm_close(); 
  Serial.println("cl");
  delay (1500);

  arm_up(); 
  Serial.println("up");
  delay (3000);

  arm_open();
  Serial.println("op"); 
  delay (1500);
  return; 

  }
  else 
  {
    Serial.println("too far");
    return;  
  }
}

void arm_close()
{
  myservo.write(0);              // tell servo to go to position in variable 'pos'
  delay(15);                       // waits 15 ms for the servo to reach the position
}

void arm_open()
{
  myservo.write(75);              // tell servo to go to position in variable 'pos'
  delay(15); 
}

void arm_down()
{
  myservo2.write(0);              // tell servo to go to position in variable 'pos'
  delay(150);               // waits 15 ms for the servo to reach the position
}

void arm_up()
{
  myservo2.write(90);              // tell servo to go to position in variable 'pos'
  delay(150);                       // waits 15 ms for the servo to reach the position
}

    
